bindings:
  - name: legacyBatchEvents
    path: ./HSTransform-v1
  - name: batchEvents
    path: ./HSTransform-v2
  - name: getProperties
    path: ./util
steps:
- name: setProperties
  condition: message.traits or message.context.traits or message.properties
  template: |
    ( 
      $setContext("propertyMap", $getProperties($[0].destination))
    )
- name: isLegacyAPI
  template: $[0].destination.Config.($not($exists(apiVersion)) or apiVersion = $API_VERSION.v1)
- name: transform
  externalWorkflow:
    path: ./hs_single_workflow.yaml
  loopOverInput: true
- name: processTransformOutput
  description: Separate Failed and successful events
  template: |
    (
      $zipInputAndOutput := $map($zip($, $outputs.transform), $merge);
      {
        "successfulEvents": $zipInputAndOutput[$exists(output)],
        "failedEvents": $zipInputAndOutput[$exists(error)]
      }
    )
- name: batchInput
  description: Prepare Input for batching
  template: |
    (
      $outputs.processTransformOutput.successfulEvents.{
        "message": $type(output) ? output[0] : output,
        "metadata": metadata,
        "destination": destination
      }
    )
- name: batchForLegacyAPI
  condition: $outputs.isLegacyAPI
  template: |
    (
      $legacyBatchEvents($outputs.batchInput)
    )
- name: batchForAPIV3
  condition: $not($outputs.isLegacyAPI)
  template: |
    (
      $batchEvents($outputs.batchInput)
    )
