bindings:
  - path: ../../../../v0/util
  - path: ../../../../v0/destinations/webhook/utils
  - path: ../../../../constants
steps:
  - name: validateInput
    template: |
      (
        $assert(destination.Config.webhookUrl or false, "Invalid URL in destination config");
        $assert($exists(message.type), "message Type is not present. Aborting message.");
      )
  - name: buildHeaderBlock
    template: |
      (
        $defaultHeaders := destination.Config.webhookMethod in ['POST', 'PUT', 'PATCH'] or $not($exists(destination.Config.webhookMethod)) ? {"content-type": "application/json"};
        $finalHeaders := $merge([$defaultHeaders, $getHashFromArray(destination.Config.headers)]);
        $messageHeader := $type(message.header) = "object" ? message.header : {};
        $finalHeaders := $merge([$finalHeaders, $sift($messageHeader, function($v){(
          $type($v) = "string"
          )})]);
        $setContext("headers", $finalHeaders);
      )
  - name: deduceEndPoint
    template: |
      (
        $integrationsObjects := $getIntegrationsObj(message, "webhook");
        $defaultEndpoint := destination.Config.webhookUrl;
        $finaleEndpoint := [ message.fullPath , $integrationsObjects.fullPath, $defaultEndpoint ][0];
        $messageAppendPath := [ message.appendPath, $integrationsObjects.appendPath ][0];
        $finaleEndpoint := $finaleEndpoint & $messageAppendPath;
        $setContext("endpoint", $finaleEndpoint)
      )
  - name: deduceMethod
    template: |
      (
       $method := destination.Config.webhookMethod ? destination.Config.webhookMethod : 'POST';
       $setContext("method", $method);
      )  
  - name: prepareContext
    template: |
      (
        $setContext ("params", {});
        $setContext("body", {});
      )
  - name: prepareParams
    condition: $context.method in ['GET', 'DELETE']
    template: |
      (
        $setContext("params", $getPropertyParams(message));
      )
     
  - name: prepareBody
    condition: $context.method in ['POST', 'PUT', 'PATCH']
    template: |
      (
        $newContext :=  message.($merge([context, {"ip": [context.ip, request_ip][0]}]));
        $newContext := $boolean($newContext)? {"context": $newContext};
        $body:= message ~> |$|$newContext, ['fullPath', 'appendPath', 'header']|;
        $setContext("body", $body);
      )
  - name: buildingResponse
    template: |
      (
        $context.{
        "body": {
            "JSON": body,
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
        },
        "version": "1",
        "type": "REST",
        "userId": $$.message.anonymousId,
        "method": method ,
        "endpoint": endpoint,
        "headers": headers ,
        "params": params,
        "files": {}
        }
      )
      
      