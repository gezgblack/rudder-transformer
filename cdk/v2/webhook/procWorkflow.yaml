bindings:
  - path: ../../../../v0/util
  - path: ../../../../v0/destinations/webhook/util
steps:
  - name: validateInput
    template: |
      (
        $assert(destination.Config.webhookUrl or false, "Invalid URL in destination config");
        $assert($exists(message.type), "message Type is not present. Aborting message.");
      )
  - name: buildHeaderBlock
    steps:
      - name: defaultHeaderBlock
        template: |
          $defaultHeaders :=  {"content-type": "application/json"}
      - name: appendHeaderFromUI
        template: |
          $finalHeaders:= $merge([$outputs.defaultHeaders, $getHashFromArray(destination.Config.headers)]);
      - name: appendHeaderFromMessage
        destination: only filter out the object properties with string values
        condition: $exists(message.headers) and $type(message.headers) = "object"
        template: |
          $finalHeaders := $merge([$outputs.finalHeaders, $sift(message.headers, function($v){(
          $type($v) = "string"
          )})]);
          $setContext("finalHeaders", $finalHeaders)
  - name: deduceEndPoint
    steps: 
      - name: fetchIntegrationsObjects
        template: |
          $integrationsObjects := $getIntegrationsObj(message, "webhook");
          $setContext("integrationsObjects", $integrationsObjects)
      - name: setDefaultEndPoint
        template: |
         $defaultEndpoint := destination.Config.webhookUrl;
         $setContext("defaultEndpoint", $defaultEndpoint)
      - name: setEndPointFromFullPath
        condition: $exists(message.fullPath) and $type(message.fullPath) = "string" 
        template: |
          $context.defaultEndpoint := message.fullPath;
      - name: setEndPointFromIntegrationsObject
        condition: $exists($context.integrationsObjects.fullPath) and $type($context.integrationsObjects.fullPath) = "string"
        template: |
          $context.defaultEndpoint := $context.integrationsObjects.fullPath;
      - name: appendEndPointFromMessage
        condition: $exists(message.appendPath) and $type(message.appendPath) = "string" 
        template: |
          $context.defaultEndpoint := $context.defaultEndpoint & message.appendPath
      - name: setEndPointFromIntegrationsObject
        condition: $exists($context.integrationsObjects.fullPath) and $type($context.integrationsObjects.fullPath) = "string"
        template: |
          $context.defaultEndpoint := $context.defaultEndpoint & context.integrationsObjects.appendPath;

  - name: processForGETMethod
    condition: destination.webhookMethod = $defaultGetRequestConfig.requestMethod
    template: |
      $response : { 
        "method" : $defaultGetRequestConfig.requestMethod,
        "params" : $getPropertyParams(message)
      }
      $setContext("payload", $response);
  - name: processPOSTMethod
    condition: destination.webhookMethod = $defaultPostRequestConfig.requestMethod
    template: |
      $response : {
        "method" : $defaultPostRequestConfig.requestMethod,
        "body": { "JSON" : $message },
        "headers": $context.finalHeaders
      }
      $setContext("payload", $response);
  - name: processPUTMethod
    condition: destination.webhookMethod = $defaultPutRequestConfig.requestMethod
    template: |
      $response : {
          "method" : $defaultPutRequestConfig.requestMethod,
          "body": { "JSON" : $message },
          "headers": $context.finalHeaders
        }
      $setContext("payload", $response);
  - name: processPATCHMethod
    condition: destination.webhookMethod = $defaultPatchRequestConfig.requestMethod
    template: |
      $response : {
          "method" : $defaultPatchRequestConfig.requestMethod,
          "body": { "JSON" : $message },
          "headers": $context.finalHeaders
        }
      $setContext("response", $response);
  - name: processDELETEMethod
    condition: destination.webhookMethod = $defaultGetRequestConfig.requestMethod
    template: |
      $response : { 
        "method" : $defaultGetRequestConfig.requestMethod,
        "params" : $getPropertyParams(message)
      }
      $setContext("response", $response);
  - name: addingUserIdAndEndPoint
    template: |
      context.response.userId :=  message.anonymousId;
      context.response.endpoint = $context.defaultEndpoint
  - name: buildingResponse
    template: |
      {
          "body": {
            "JSON": $,
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": $context.response.method ? $context.response.method : 'POST' ,
          "endpoint": $context.defaultEndpoint ? $context.defaultEndpoint : {} ,
          "headers": $context.response.headers ? $context.response.headers : {} ,
          "params": $context.response.params ? $context.response.params : {},
          "files": {}
        }

    