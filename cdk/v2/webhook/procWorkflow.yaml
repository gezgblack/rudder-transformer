bindings:
  - path: ../../../../v0/util
  - path: ../../../../v0/destinations/webhook/util
steps:
  - name: validateInput
    template: |
      (
        $assert(destination.Config.webhookUrl or false, "Invalid URL in destination config");
        $assert($exists(message.type), "message Type is not present. Aborting message.");
      )
  - name: buildHeaderBlock
    template: |
      (
        $defaultHeaders :=  {"content-type": "application/json"};
        $finalHeaders := $merge([$defaultHeaders, $getHashFromArray(destination.Config.headers)]);
        $messageHeader := $type(message.headers) = "object" ? message.headers : {};
        $finalHeaders := $merge([$finalHeaders, $sift($messageHeader, function($v){(
          $type($v) = "string"
          )})]);
        $setContext("finalHeaders", $finalHeaders);
      )
  - name: deduceEndPoint
    template: |
      (
        $integrationsObjects := $getIntegrationsObj(message, "webhook");
        $defaultEndpoint := destination.Config.webhookUrl;
        $finaleEndpoint := [ message.fullPath , $integrationsObjects.fullPath, $defaultEndpoint ][0];
        $messageAppendPath := [ message.appendPath, $integrationsObjects.appendPath ][0];
        $finaleEndpoint := $finaleEndpoint & $messageAppendPath;
        $setContext("finaleEndpoint", $finaleEndpoint)
      )
  - name: processForGETANDDELETEMethod
    condition: destination.Config.webhookMethod = $defaultGetRequestConfig.requestMethod or destination.Config.webhookMethod = $defaultDeleteRequestConfig.requestMethod
    template: |
      (
       $response : { 
        "method" : $defaultGetRequestConfig.requestMethod or $defaultDeleteRequestConfig.requestMethod,
        "params" : $getPropertyParams(message)
      };
      $setContext("payload", $response);
      )
     
  - name: processPOSTPUTPATCHMethod
    condition: destination.Config.webhookMethod = $defaultPostRequestConfig.requestMethod or destination.Config.webhookMethod = $defaultPutRequestConfig.requestMethod or destination.Config.webhookMethod = $defaultPatchRequestConfig.requestMethod
    template: |
      (
      $filteredMessage : message ~> |$|{}, ['fullPath', 'appendPath']|
      $userId:= {"userId": message.anonymousId};
      $response : {
        "method" : destination.Config.webhookMethod,
        "body": $merge([$filteredMessage, $userId]),
        "headers": $context.finalHeaders
      };
      $setContext("payload", $response);
      )
  - name: buildingResponse
    template: |
      {
          "body": {
            "JSON": $context.response.body ? $context.response.body : {} ,
            "JSON_ARRAY": {},
            "XML": {},
            "FORM": {}
          },
          "version": "1",
          "type": "REST",
          "method": $context.response.method ? $context.response.method : 'POST' ,
          "endpoint": $context.defaultEndpoint ? $context.finaleEndpoint,
          "headers": $context.response.finalHeaders ? $context.response.finalHeaders : {} ,
          "params": $context.response.params ? $context.response.params : {},
          "files": {}
        }

    